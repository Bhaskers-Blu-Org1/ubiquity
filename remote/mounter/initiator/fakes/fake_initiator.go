// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/remote/mounter/initiator"
	"github.com/IBM/ubiquity/resources"
)

type FakeInitiator struct {
	GetHBAsStub        func() []string
	getHBAsMutex       sync.RWMutex
	getHBAsArgsForCall []struct {
	}
	getHBAsReturns struct {
		result1 []string
	}
	getHBAsReturnsOnCall map[int]struct {
		result1 []string
	}
	RemoveSCSIDeviceStub        func(string) error
	removeSCSIDeviceMutex       sync.RWMutex
	removeSCSIDeviceArgsForCall []struct {
		arg1 string
	}
	removeSCSIDeviceReturns struct {
		result1 error
	}
	removeSCSIDeviceReturnsOnCall map[int]struct {
		result1 error
	}
	RescanHostsStub        func([]string, *resources.VolumeMountProperties) error
	rescanHostsMutex       sync.RWMutex
	rescanHostsArgsForCall []struct {
		arg1 []string
		arg2 *resources.VolumeMountProperties
	}
	rescanHostsReturns struct {
		result1 error
	}
	rescanHostsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInitiator) GetHBAs() []string {
	fake.getHBAsMutex.Lock()
	ret, specificReturn := fake.getHBAsReturnsOnCall[len(fake.getHBAsArgsForCall)]
	fake.getHBAsArgsForCall = append(fake.getHBAsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetHBAs", []interface{}{})
	fake.getHBAsMutex.Unlock()
	if fake.GetHBAsStub != nil {
		return fake.GetHBAsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getHBAsReturns
	return fakeReturns.result1
}

func (fake *FakeInitiator) GetHBAsCallCount() int {
	fake.getHBAsMutex.RLock()
	defer fake.getHBAsMutex.RUnlock()
	return len(fake.getHBAsArgsForCall)
}

func (fake *FakeInitiator) GetHBAsCalls(stub func() []string) {
	fake.getHBAsMutex.Lock()
	defer fake.getHBAsMutex.Unlock()
	fake.GetHBAsStub = stub
}

func (fake *FakeInitiator) GetHBAsReturns(result1 []string) {
	fake.getHBAsMutex.Lock()
	defer fake.getHBAsMutex.Unlock()
	fake.GetHBAsStub = nil
	fake.getHBAsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeInitiator) GetHBAsReturnsOnCall(i int, result1 []string) {
	fake.getHBAsMutex.Lock()
	defer fake.getHBAsMutex.Unlock()
	fake.GetHBAsStub = nil
	if fake.getHBAsReturnsOnCall == nil {
		fake.getHBAsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getHBAsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeInitiator) RemoveSCSIDevice(arg1 string) error {
	fake.removeSCSIDeviceMutex.Lock()
	ret, specificReturn := fake.removeSCSIDeviceReturnsOnCall[len(fake.removeSCSIDeviceArgsForCall)]
	fake.removeSCSIDeviceArgsForCall = append(fake.removeSCSIDeviceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RemoveSCSIDevice", []interface{}{arg1})
	fake.removeSCSIDeviceMutex.Unlock()
	if fake.RemoveSCSIDeviceStub != nil {
		return fake.RemoveSCSIDeviceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSCSIDeviceReturns
	return fakeReturns.result1
}

func (fake *FakeInitiator) RemoveSCSIDeviceCallCount() int {
	fake.removeSCSIDeviceMutex.RLock()
	defer fake.removeSCSIDeviceMutex.RUnlock()
	return len(fake.removeSCSIDeviceArgsForCall)
}

func (fake *FakeInitiator) RemoveSCSIDeviceCalls(stub func(string) error) {
	fake.removeSCSIDeviceMutex.Lock()
	defer fake.removeSCSIDeviceMutex.Unlock()
	fake.RemoveSCSIDeviceStub = stub
}

func (fake *FakeInitiator) RemoveSCSIDeviceArgsForCall(i int) string {
	fake.removeSCSIDeviceMutex.RLock()
	defer fake.removeSCSIDeviceMutex.RUnlock()
	argsForCall := fake.removeSCSIDeviceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInitiator) RemoveSCSIDeviceReturns(result1 error) {
	fake.removeSCSIDeviceMutex.Lock()
	defer fake.removeSCSIDeviceMutex.Unlock()
	fake.RemoveSCSIDeviceStub = nil
	fake.removeSCSIDeviceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInitiator) RemoveSCSIDeviceReturnsOnCall(i int, result1 error) {
	fake.removeSCSIDeviceMutex.Lock()
	defer fake.removeSCSIDeviceMutex.Unlock()
	fake.RemoveSCSIDeviceStub = nil
	if fake.removeSCSIDeviceReturnsOnCall == nil {
		fake.removeSCSIDeviceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSCSIDeviceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInitiator) RescanHosts(arg1 []string, arg2 *resources.VolumeMountProperties) error {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.rescanHostsMutex.Lock()
	ret, specificReturn := fake.rescanHostsReturnsOnCall[len(fake.rescanHostsArgsForCall)]
	fake.rescanHostsArgsForCall = append(fake.rescanHostsArgsForCall, struct {
		arg1 []string
		arg2 *resources.VolumeMountProperties
	}{arg1Copy, arg2})
	fake.recordInvocation("RescanHosts", []interface{}{arg1Copy, arg2})
	fake.rescanHostsMutex.Unlock()
	if fake.RescanHostsStub != nil {
		return fake.RescanHostsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.rescanHostsReturns
	return fakeReturns.result1
}

func (fake *FakeInitiator) RescanHostsCallCount() int {
	fake.rescanHostsMutex.RLock()
	defer fake.rescanHostsMutex.RUnlock()
	return len(fake.rescanHostsArgsForCall)
}

func (fake *FakeInitiator) RescanHostsCalls(stub func([]string, *resources.VolumeMountProperties) error) {
	fake.rescanHostsMutex.Lock()
	defer fake.rescanHostsMutex.Unlock()
	fake.RescanHostsStub = stub
}

func (fake *FakeInitiator) RescanHostsArgsForCall(i int) ([]string, *resources.VolumeMountProperties) {
	fake.rescanHostsMutex.RLock()
	defer fake.rescanHostsMutex.RUnlock()
	argsForCall := fake.rescanHostsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeInitiator) RescanHostsReturns(result1 error) {
	fake.rescanHostsMutex.Lock()
	defer fake.rescanHostsMutex.Unlock()
	fake.RescanHostsStub = nil
	fake.rescanHostsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInitiator) RescanHostsReturnsOnCall(i int, result1 error) {
	fake.rescanHostsMutex.Lock()
	defer fake.rescanHostsMutex.Unlock()
	fake.RescanHostsStub = nil
	if fake.rescanHostsReturnsOnCall == nil {
		fake.rescanHostsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rescanHostsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInitiator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getHBAsMutex.RLock()
	defer fake.getHBAsMutex.RUnlock()
	fake.removeSCSIDeviceMutex.RLock()
	defer fake.removeSCSIDeviceMutex.RUnlock()
	fake.rescanHostsMutex.RLock()
	defer fake.rescanHostsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInitiator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ initiator.Initiator = new(FakeInitiator)
