// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/local/spectrumscale/connectors"
	"github.com/IBM/ubiquity/resources"
)

type FakeSpectrumScaleConnector struct {
	CheckIfFSQuotaEnabledStub        func(string) error
	checkIfFSQuotaEnabledMutex       sync.RWMutex
	checkIfFSQuotaEnabledArgsForCall []struct {
		arg1 string
	}
	checkIfFSQuotaEnabledReturns struct {
		result1 error
	}
	checkIfFSQuotaEnabledReturnsOnCall map[int]struct {
		result1 error
	}
	CreateFilesetStub        func(string, string, map[string]interface{}) error
	createFilesetMutex       sync.RWMutex
	createFilesetArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
	}
	createFilesetReturns struct {
		result1 error
	}
	createFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteFilesetStub        func(string, string) error
	deleteFilesetMutex       sync.RWMutex
	deleteFilesetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteFilesetReturns struct {
		result1 error
	}
	deleteFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	GetClusterIdStub        func() (string, error)
	getClusterIdMutex       sync.RWMutex
	getClusterIdArgsForCall []struct {
	}
	getClusterIdReturns struct {
		result1 string
		result2 error
	}
	getClusterIdReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetFilesystemMountpointStub        func(string) (string, error)
	getFilesystemMountpointMutex       sync.RWMutex
	getFilesystemMountpointArgsForCall []struct {
		arg1 string
	}
	getFilesystemMountpointReturns struct {
		result1 string
		result2 error
	}
	getFilesystemMountpointReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	IsFilesetLinkedStub        func(string, string) (bool, error)
	isFilesetLinkedMutex       sync.RWMutex
	isFilesetLinkedArgsForCall []struct {
		arg1 string
		arg2 string
	}
	isFilesetLinkedReturns struct {
		result1 bool
		result2 error
	}
	isFilesetLinkedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsFilesystemMountedStub        func(string) (bool, error)
	isFilesystemMountedMutex       sync.RWMutex
	isFilesystemMountedArgsForCall []struct {
		arg1 string
	}
	isFilesystemMountedReturns struct {
		result1 bool
		result2 error
	}
	isFilesystemMountedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	LinkFilesetStub        func(string, string) error
	linkFilesetMutex       sync.RWMutex
	linkFilesetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	linkFilesetReturns struct {
		result1 error
	}
	linkFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	ListFilesetStub        func(string, string) (resources.Volume, error)
	listFilesetMutex       sync.RWMutex
	listFilesetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	listFilesetReturns struct {
		result1 resources.Volume
		result2 error
	}
	listFilesetReturnsOnCall map[int]struct {
		result1 resources.Volume
		result2 error
	}
	ListFilesetQuotaStub        func(string, string) (string, error)
	listFilesetQuotaMutex       sync.RWMutex
	listFilesetQuotaArgsForCall []struct {
		arg1 string
		arg2 string
	}
	listFilesetQuotaReturns struct {
		result1 string
		result2 error
	}
	listFilesetQuotaReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ListFilesetsStub        func(string) ([]resources.Volume, error)
	listFilesetsMutex       sync.RWMutex
	listFilesetsArgsForCall []struct {
		arg1 string
	}
	listFilesetsReturns struct {
		result1 []resources.Volume
		result2 error
	}
	listFilesetsReturnsOnCall map[int]struct {
		result1 []resources.Volume
		result2 error
	}
	ListFilesystemsStub        func() ([]string, error)
	listFilesystemsMutex       sync.RWMutex
	listFilesystemsArgsForCall []struct {
	}
	listFilesystemsReturns struct {
		result1 []string
		result2 error
	}
	listFilesystemsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	SetFilesetQuotaStub        func(string, string, string) error
	setFilesetQuotaMutex       sync.RWMutex
	setFilesetQuotaArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	setFilesetQuotaReturns struct {
		result1 error
	}
	setFilesetQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	UnlinkFilesetStub        func(string, string) error
	unlinkFilesetMutex       sync.RWMutex
	unlinkFilesetArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unlinkFilesetReturns struct {
		result1 error
	}
	unlinkFilesetReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabled(arg1 string) error {
	fake.checkIfFSQuotaEnabledMutex.Lock()
	ret, specificReturn := fake.checkIfFSQuotaEnabledReturnsOnCall[len(fake.checkIfFSQuotaEnabledArgsForCall)]
	fake.checkIfFSQuotaEnabledArgsForCall = append(fake.checkIfFSQuotaEnabledArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CheckIfFSQuotaEnabled", []interface{}{arg1})
	fake.checkIfFSQuotaEnabledMutex.Unlock()
	if fake.CheckIfFSQuotaEnabledStub != nil {
		return fake.CheckIfFSQuotaEnabledStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.checkIfFSQuotaEnabledReturns
	return fakeReturns.result1
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledCallCount() int {
	fake.checkIfFSQuotaEnabledMutex.RLock()
	defer fake.checkIfFSQuotaEnabledMutex.RUnlock()
	return len(fake.checkIfFSQuotaEnabledArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledCalls(stub func(string) error) {
	fake.checkIfFSQuotaEnabledMutex.Lock()
	defer fake.checkIfFSQuotaEnabledMutex.Unlock()
	fake.CheckIfFSQuotaEnabledStub = stub
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledArgsForCall(i int) string {
	fake.checkIfFSQuotaEnabledMutex.RLock()
	defer fake.checkIfFSQuotaEnabledMutex.RUnlock()
	argsForCall := fake.checkIfFSQuotaEnabledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledReturns(result1 error) {
	fake.checkIfFSQuotaEnabledMutex.Lock()
	defer fake.checkIfFSQuotaEnabledMutex.Unlock()
	fake.CheckIfFSQuotaEnabledStub = nil
	fake.checkIfFSQuotaEnabledReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) CheckIfFSQuotaEnabledReturnsOnCall(i int, result1 error) {
	fake.checkIfFSQuotaEnabledMutex.Lock()
	defer fake.checkIfFSQuotaEnabledMutex.Unlock()
	fake.CheckIfFSQuotaEnabledStub = nil
	if fake.checkIfFSQuotaEnabledReturnsOnCall == nil {
		fake.checkIfFSQuotaEnabledReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkIfFSQuotaEnabledReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) CreateFileset(arg1 string, arg2 string, arg3 map[string]interface{}) error {
	fake.createFilesetMutex.Lock()
	ret, specificReturn := fake.createFilesetReturnsOnCall[len(fake.createFilesetArgsForCall)]
	fake.createFilesetArgsForCall = append(fake.createFilesetArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateFileset", []interface{}{arg1, arg2, arg3})
	fake.createFilesetMutex.Unlock()
	if fake.CreateFilesetStub != nil {
		return fake.CreateFilesetStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createFilesetReturns
	return fakeReturns.result1
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetCallCount() int {
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	return len(fake.createFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetCalls(stub func(string, string, map[string]interface{}) error) {
	fake.createFilesetMutex.Lock()
	defer fake.createFilesetMutex.Unlock()
	fake.CreateFilesetStub = stub
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetArgsForCall(i int) (string, string, map[string]interface{}) {
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	argsForCall := fake.createFilesetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetReturns(result1 error) {
	fake.createFilesetMutex.Lock()
	defer fake.createFilesetMutex.Unlock()
	fake.CreateFilesetStub = nil
	fake.createFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) CreateFilesetReturnsOnCall(i int, result1 error) {
	fake.createFilesetMutex.Lock()
	defer fake.createFilesetMutex.Unlock()
	fake.CreateFilesetStub = nil
	if fake.createFilesetReturnsOnCall == nil {
		fake.createFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) DeleteFileset(arg1 string, arg2 string) error {
	fake.deleteFilesetMutex.Lock()
	ret, specificReturn := fake.deleteFilesetReturnsOnCall[len(fake.deleteFilesetArgsForCall)]
	fake.deleteFilesetArgsForCall = append(fake.deleteFilesetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteFileset", []interface{}{arg1, arg2})
	fake.deleteFilesetMutex.Unlock()
	if fake.DeleteFilesetStub != nil {
		return fake.DeleteFilesetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteFilesetReturns
	return fakeReturns.result1
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetCallCount() int {
	fake.deleteFilesetMutex.RLock()
	defer fake.deleteFilesetMutex.RUnlock()
	return len(fake.deleteFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetCalls(stub func(string, string) error) {
	fake.deleteFilesetMutex.Lock()
	defer fake.deleteFilesetMutex.Unlock()
	fake.DeleteFilesetStub = stub
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetArgsForCall(i int) (string, string) {
	fake.deleteFilesetMutex.RLock()
	defer fake.deleteFilesetMutex.RUnlock()
	argsForCall := fake.deleteFilesetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetReturns(result1 error) {
	fake.deleteFilesetMutex.Lock()
	defer fake.deleteFilesetMutex.Unlock()
	fake.DeleteFilesetStub = nil
	fake.deleteFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) DeleteFilesetReturnsOnCall(i int, result1 error) {
	fake.deleteFilesetMutex.Lock()
	defer fake.deleteFilesetMutex.Unlock()
	fake.DeleteFilesetStub = nil
	if fake.deleteFilesetReturnsOnCall == nil {
		fake.deleteFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) GetClusterId() (string, error) {
	fake.getClusterIdMutex.Lock()
	ret, specificReturn := fake.getClusterIdReturnsOnCall[len(fake.getClusterIdArgsForCall)]
	fake.getClusterIdArgsForCall = append(fake.getClusterIdArgsForCall, struct {
	}{})
	fake.recordInvocation("GetClusterId", []interface{}{})
	fake.getClusterIdMutex.Unlock()
	if fake.GetClusterIdStub != nil {
		return fake.GetClusterIdStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getClusterIdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) GetClusterIdCallCount() int {
	fake.getClusterIdMutex.RLock()
	defer fake.getClusterIdMutex.RUnlock()
	return len(fake.getClusterIdArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) GetClusterIdCalls(stub func() (string, error)) {
	fake.getClusterIdMutex.Lock()
	defer fake.getClusterIdMutex.Unlock()
	fake.GetClusterIdStub = stub
}

func (fake *FakeSpectrumScaleConnector) GetClusterIdReturns(result1 string, result2 error) {
	fake.getClusterIdMutex.Lock()
	defer fake.getClusterIdMutex.Unlock()
	fake.GetClusterIdStub = nil
	fake.getClusterIdReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) GetClusterIdReturnsOnCall(i int, result1 string, result2 error) {
	fake.getClusterIdMutex.Lock()
	defer fake.getClusterIdMutex.Unlock()
	fake.GetClusterIdStub = nil
	if fake.getClusterIdReturnsOnCall == nil {
		fake.getClusterIdReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getClusterIdReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpoint(arg1 string) (string, error) {
	fake.getFilesystemMountpointMutex.Lock()
	ret, specificReturn := fake.getFilesystemMountpointReturnsOnCall[len(fake.getFilesystemMountpointArgsForCall)]
	fake.getFilesystemMountpointArgsForCall = append(fake.getFilesystemMountpointArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetFilesystemMountpoint", []interface{}{arg1})
	fake.getFilesystemMountpointMutex.Unlock()
	if fake.GetFilesystemMountpointStub != nil {
		return fake.GetFilesystemMountpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getFilesystemMountpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointCallCount() int {
	fake.getFilesystemMountpointMutex.RLock()
	defer fake.getFilesystemMountpointMutex.RUnlock()
	return len(fake.getFilesystemMountpointArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointCalls(stub func(string) (string, error)) {
	fake.getFilesystemMountpointMutex.Lock()
	defer fake.getFilesystemMountpointMutex.Unlock()
	fake.GetFilesystemMountpointStub = stub
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointArgsForCall(i int) string {
	fake.getFilesystemMountpointMutex.RLock()
	defer fake.getFilesystemMountpointMutex.RUnlock()
	argsForCall := fake.getFilesystemMountpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointReturns(result1 string, result2 error) {
	fake.getFilesystemMountpointMutex.Lock()
	defer fake.getFilesystemMountpointMutex.Unlock()
	fake.GetFilesystemMountpointStub = nil
	fake.getFilesystemMountpointReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) GetFilesystemMountpointReturnsOnCall(i int, result1 string, result2 error) {
	fake.getFilesystemMountpointMutex.Lock()
	defer fake.getFilesystemMountpointMutex.Unlock()
	fake.GetFilesystemMountpointStub = nil
	if fake.getFilesystemMountpointReturnsOnCall == nil {
		fake.getFilesystemMountpointReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getFilesystemMountpointReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinked(arg1 string, arg2 string) (bool, error) {
	fake.isFilesetLinkedMutex.Lock()
	ret, specificReturn := fake.isFilesetLinkedReturnsOnCall[len(fake.isFilesetLinkedArgsForCall)]
	fake.isFilesetLinkedArgsForCall = append(fake.isFilesetLinkedArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("IsFilesetLinked", []interface{}{arg1, arg2})
	fake.isFilesetLinkedMutex.Unlock()
	if fake.IsFilesetLinkedStub != nil {
		return fake.IsFilesetLinkedStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.isFilesetLinkedReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedCallCount() int {
	fake.isFilesetLinkedMutex.RLock()
	defer fake.isFilesetLinkedMutex.RUnlock()
	return len(fake.isFilesetLinkedArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedCalls(stub func(string, string) (bool, error)) {
	fake.isFilesetLinkedMutex.Lock()
	defer fake.isFilesetLinkedMutex.Unlock()
	fake.IsFilesetLinkedStub = stub
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedArgsForCall(i int) (string, string) {
	fake.isFilesetLinkedMutex.RLock()
	defer fake.isFilesetLinkedMutex.RUnlock()
	argsForCall := fake.isFilesetLinkedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedReturns(result1 bool, result2 error) {
	fake.isFilesetLinkedMutex.Lock()
	defer fake.isFilesetLinkedMutex.Unlock()
	fake.IsFilesetLinkedStub = nil
	fake.isFilesetLinkedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesetLinkedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isFilesetLinkedMutex.Lock()
	defer fake.isFilesetLinkedMutex.Unlock()
	fake.IsFilesetLinkedStub = nil
	if fake.isFilesetLinkedReturnsOnCall == nil {
		fake.isFilesetLinkedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isFilesetLinkedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMounted(arg1 string) (bool, error) {
	fake.isFilesystemMountedMutex.Lock()
	ret, specificReturn := fake.isFilesystemMountedReturnsOnCall[len(fake.isFilesystemMountedArgsForCall)]
	fake.isFilesystemMountedArgsForCall = append(fake.isFilesystemMountedArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IsFilesystemMounted", []interface{}{arg1})
	fake.isFilesystemMountedMutex.Unlock()
	if fake.IsFilesystemMountedStub != nil {
		return fake.IsFilesystemMountedStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.isFilesystemMountedReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedCallCount() int {
	fake.isFilesystemMountedMutex.RLock()
	defer fake.isFilesystemMountedMutex.RUnlock()
	return len(fake.isFilesystemMountedArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedCalls(stub func(string) (bool, error)) {
	fake.isFilesystemMountedMutex.Lock()
	defer fake.isFilesystemMountedMutex.Unlock()
	fake.IsFilesystemMountedStub = stub
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedArgsForCall(i int) string {
	fake.isFilesystemMountedMutex.RLock()
	defer fake.isFilesystemMountedMutex.RUnlock()
	argsForCall := fake.isFilesystemMountedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedReturns(result1 bool, result2 error) {
	fake.isFilesystemMountedMutex.Lock()
	defer fake.isFilesystemMountedMutex.Unlock()
	fake.IsFilesystemMountedStub = nil
	fake.isFilesystemMountedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) IsFilesystemMountedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isFilesystemMountedMutex.Lock()
	defer fake.isFilesystemMountedMutex.Unlock()
	fake.IsFilesystemMountedStub = nil
	if fake.isFilesystemMountedReturnsOnCall == nil {
		fake.isFilesystemMountedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isFilesystemMountedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) LinkFileset(arg1 string, arg2 string) error {
	fake.linkFilesetMutex.Lock()
	ret, specificReturn := fake.linkFilesetReturnsOnCall[len(fake.linkFilesetArgsForCall)]
	fake.linkFilesetArgsForCall = append(fake.linkFilesetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("LinkFileset", []interface{}{arg1, arg2})
	fake.linkFilesetMutex.Unlock()
	if fake.LinkFilesetStub != nil {
		return fake.LinkFilesetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.linkFilesetReturns
	return fakeReturns.result1
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetCallCount() int {
	fake.linkFilesetMutex.RLock()
	defer fake.linkFilesetMutex.RUnlock()
	return len(fake.linkFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetCalls(stub func(string, string) error) {
	fake.linkFilesetMutex.Lock()
	defer fake.linkFilesetMutex.Unlock()
	fake.LinkFilesetStub = stub
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetArgsForCall(i int) (string, string) {
	fake.linkFilesetMutex.RLock()
	defer fake.linkFilesetMutex.RUnlock()
	argsForCall := fake.linkFilesetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetReturns(result1 error) {
	fake.linkFilesetMutex.Lock()
	defer fake.linkFilesetMutex.Unlock()
	fake.LinkFilesetStub = nil
	fake.linkFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) LinkFilesetReturnsOnCall(i int, result1 error) {
	fake.linkFilesetMutex.Lock()
	defer fake.linkFilesetMutex.Unlock()
	fake.LinkFilesetStub = nil
	if fake.linkFilesetReturnsOnCall == nil {
		fake.linkFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.linkFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) ListFileset(arg1 string, arg2 string) (resources.Volume, error) {
	fake.listFilesetMutex.Lock()
	ret, specificReturn := fake.listFilesetReturnsOnCall[len(fake.listFilesetArgsForCall)]
	fake.listFilesetArgsForCall = append(fake.listFilesetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ListFileset", []interface{}{arg1, arg2})
	fake.listFilesetMutex.Unlock()
	if fake.ListFilesetStub != nil {
		return fake.ListFilesetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listFilesetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetCallCount() int {
	fake.listFilesetMutex.RLock()
	defer fake.listFilesetMutex.RUnlock()
	return len(fake.listFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesetCalls(stub func(string, string) (resources.Volume, error)) {
	fake.listFilesetMutex.Lock()
	defer fake.listFilesetMutex.Unlock()
	fake.ListFilesetStub = stub
}

func (fake *FakeSpectrumScaleConnector) ListFilesetArgsForCall(i int) (string, string) {
	fake.listFilesetMutex.RLock()
	defer fake.listFilesetMutex.RUnlock()
	argsForCall := fake.listFilesetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetReturns(result1 resources.Volume, result2 error) {
	fake.listFilesetMutex.Lock()
	defer fake.listFilesetMutex.Unlock()
	fake.ListFilesetStub = nil
	fake.listFilesetReturns = struct {
		result1 resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesetReturnsOnCall(i int, result1 resources.Volume, result2 error) {
	fake.listFilesetMutex.Lock()
	defer fake.listFilesetMutex.Unlock()
	fake.ListFilesetStub = nil
	if fake.listFilesetReturnsOnCall == nil {
		fake.listFilesetReturnsOnCall = make(map[int]struct {
			result1 resources.Volume
			result2 error
		})
	}
	fake.listFilesetReturnsOnCall[i] = struct {
		result1 resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuota(arg1 string, arg2 string) (string, error) {
	fake.listFilesetQuotaMutex.Lock()
	ret, specificReturn := fake.listFilesetQuotaReturnsOnCall[len(fake.listFilesetQuotaArgsForCall)]
	fake.listFilesetQuotaArgsForCall = append(fake.listFilesetQuotaArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ListFilesetQuota", []interface{}{arg1, arg2})
	fake.listFilesetQuotaMutex.Unlock()
	if fake.ListFilesetQuotaStub != nil {
		return fake.ListFilesetQuotaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listFilesetQuotaReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaCallCount() int {
	fake.listFilesetQuotaMutex.RLock()
	defer fake.listFilesetQuotaMutex.RUnlock()
	return len(fake.listFilesetQuotaArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaCalls(stub func(string, string) (string, error)) {
	fake.listFilesetQuotaMutex.Lock()
	defer fake.listFilesetQuotaMutex.Unlock()
	fake.ListFilesetQuotaStub = stub
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaArgsForCall(i int) (string, string) {
	fake.listFilesetQuotaMutex.RLock()
	defer fake.listFilesetQuotaMutex.RUnlock()
	argsForCall := fake.listFilesetQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaReturns(result1 string, result2 error) {
	fake.listFilesetQuotaMutex.Lock()
	defer fake.listFilesetQuotaMutex.Unlock()
	fake.ListFilesetQuotaStub = nil
	fake.listFilesetQuotaReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesetQuotaReturnsOnCall(i int, result1 string, result2 error) {
	fake.listFilesetQuotaMutex.Lock()
	defer fake.listFilesetQuotaMutex.Unlock()
	fake.ListFilesetQuotaStub = nil
	if fake.listFilesetQuotaReturnsOnCall == nil {
		fake.listFilesetQuotaReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.listFilesetQuotaReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesets(arg1 string) ([]resources.Volume, error) {
	fake.listFilesetsMutex.Lock()
	ret, specificReturn := fake.listFilesetsReturnsOnCall[len(fake.listFilesetsArgsForCall)]
	fake.listFilesetsArgsForCall = append(fake.listFilesetsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListFilesets", []interface{}{arg1})
	fake.listFilesetsMutex.Unlock()
	if fake.ListFilesetsStub != nil {
		return fake.ListFilesetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listFilesetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsCallCount() int {
	fake.listFilesetsMutex.RLock()
	defer fake.listFilesetsMutex.RUnlock()
	return len(fake.listFilesetsArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsCalls(stub func(string) ([]resources.Volume, error)) {
	fake.listFilesetsMutex.Lock()
	defer fake.listFilesetsMutex.Unlock()
	fake.ListFilesetsStub = stub
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsArgsForCall(i int) string {
	fake.listFilesetsMutex.RLock()
	defer fake.listFilesetsMutex.RUnlock()
	argsForCall := fake.listFilesetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsReturns(result1 []resources.Volume, result2 error) {
	fake.listFilesetsMutex.Lock()
	defer fake.listFilesetsMutex.Unlock()
	fake.ListFilesetsStub = nil
	fake.listFilesetsReturns = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesetsReturnsOnCall(i int, result1 []resources.Volume, result2 error) {
	fake.listFilesetsMutex.Lock()
	defer fake.listFilesetsMutex.Unlock()
	fake.ListFilesetsStub = nil
	if fake.listFilesetsReturnsOnCall == nil {
		fake.listFilesetsReturnsOnCall = make(map[int]struct {
			result1 []resources.Volume
			result2 error
		})
	}
	fake.listFilesetsReturnsOnCall[i] = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesystems() ([]string, error) {
	fake.listFilesystemsMutex.Lock()
	ret, specificReturn := fake.listFilesystemsReturnsOnCall[len(fake.listFilesystemsArgsForCall)]
	fake.listFilesystemsArgsForCall = append(fake.listFilesystemsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListFilesystems", []interface{}{})
	fake.listFilesystemsMutex.Unlock()
	if fake.ListFilesystemsStub != nil {
		return fake.ListFilesystemsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listFilesystemsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSpectrumScaleConnector) ListFilesystemsCallCount() int {
	fake.listFilesystemsMutex.RLock()
	defer fake.listFilesystemsMutex.RUnlock()
	return len(fake.listFilesystemsArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) ListFilesystemsCalls(stub func() ([]string, error)) {
	fake.listFilesystemsMutex.Lock()
	defer fake.listFilesystemsMutex.Unlock()
	fake.ListFilesystemsStub = stub
}

func (fake *FakeSpectrumScaleConnector) ListFilesystemsReturns(result1 []string, result2 error) {
	fake.listFilesystemsMutex.Lock()
	defer fake.listFilesystemsMutex.Unlock()
	fake.ListFilesystemsStub = nil
	fake.listFilesystemsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) ListFilesystemsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listFilesystemsMutex.Lock()
	defer fake.listFilesystemsMutex.Unlock()
	fake.ListFilesystemsStub = nil
	if fake.listFilesystemsReturnsOnCall == nil {
		fake.listFilesystemsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listFilesystemsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuota(arg1 string, arg2 string, arg3 string) error {
	fake.setFilesetQuotaMutex.Lock()
	ret, specificReturn := fake.setFilesetQuotaReturnsOnCall[len(fake.setFilesetQuotaArgsForCall)]
	fake.setFilesetQuotaArgsForCall = append(fake.setFilesetQuotaArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetFilesetQuota", []interface{}{arg1, arg2, arg3})
	fake.setFilesetQuotaMutex.Unlock()
	if fake.SetFilesetQuotaStub != nil {
		return fake.SetFilesetQuotaStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setFilesetQuotaReturns
	return fakeReturns.result1
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaCallCount() int {
	fake.setFilesetQuotaMutex.RLock()
	defer fake.setFilesetQuotaMutex.RUnlock()
	return len(fake.setFilesetQuotaArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaCalls(stub func(string, string, string) error) {
	fake.setFilesetQuotaMutex.Lock()
	defer fake.setFilesetQuotaMutex.Unlock()
	fake.SetFilesetQuotaStub = stub
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaArgsForCall(i int) (string, string, string) {
	fake.setFilesetQuotaMutex.RLock()
	defer fake.setFilesetQuotaMutex.RUnlock()
	argsForCall := fake.setFilesetQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaReturns(result1 error) {
	fake.setFilesetQuotaMutex.Lock()
	defer fake.setFilesetQuotaMutex.Unlock()
	fake.SetFilesetQuotaStub = nil
	fake.setFilesetQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) SetFilesetQuotaReturnsOnCall(i int, result1 error) {
	fake.setFilesetQuotaMutex.Lock()
	defer fake.setFilesetQuotaMutex.Unlock()
	fake.SetFilesetQuotaStub = nil
	if fake.setFilesetQuotaReturnsOnCall == nil {
		fake.setFilesetQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setFilesetQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) UnlinkFileset(arg1 string, arg2 string) error {
	fake.unlinkFilesetMutex.Lock()
	ret, specificReturn := fake.unlinkFilesetReturnsOnCall[len(fake.unlinkFilesetArgsForCall)]
	fake.unlinkFilesetArgsForCall = append(fake.unlinkFilesetArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UnlinkFileset", []interface{}{arg1, arg2})
	fake.unlinkFilesetMutex.Unlock()
	if fake.UnlinkFilesetStub != nil {
		return fake.UnlinkFilesetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unlinkFilesetReturns
	return fakeReturns.result1
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetCallCount() int {
	fake.unlinkFilesetMutex.RLock()
	defer fake.unlinkFilesetMutex.RUnlock()
	return len(fake.unlinkFilesetArgsForCall)
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetCalls(stub func(string, string) error) {
	fake.unlinkFilesetMutex.Lock()
	defer fake.unlinkFilesetMutex.Unlock()
	fake.UnlinkFilesetStub = stub
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetArgsForCall(i int) (string, string) {
	fake.unlinkFilesetMutex.RLock()
	defer fake.unlinkFilesetMutex.RUnlock()
	argsForCall := fake.unlinkFilesetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetReturns(result1 error) {
	fake.unlinkFilesetMutex.Lock()
	defer fake.unlinkFilesetMutex.Unlock()
	fake.UnlinkFilesetStub = nil
	fake.unlinkFilesetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) UnlinkFilesetReturnsOnCall(i int, result1 error) {
	fake.unlinkFilesetMutex.Lock()
	defer fake.unlinkFilesetMutex.Unlock()
	fake.UnlinkFilesetStub = nil
	if fake.unlinkFilesetReturnsOnCall == nil {
		fake.unlinkFilesetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unlinkFilesetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpectrumScaleConnector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkIfFSQuotaEnabledMutex.RLock()
	defer fake.checkIfFSQuotaEnabledMutex.RUnlock()
	fake.createFilesetMutex.RLock()
	defer fake.createFilesetMutex.RUnlock()
	fake.deleteFilesetMutex.RLock()
	defer fake.deleteFilesetMutex.RUnlock()
	fake.getClusterIdMutex.RLock()
	defer fake.getClusterIdMutex.RUnlock()
	fake.getFilesystemMountpointMutex.RLock()
	defer fake.getFilesystemMountpointMutex.RUnlock()
	fake.isFilesetLinkedMutex.RLock()
	defer fake.isFilesetLinkedMutex.RUnlock()
	fake.isFilesystemMountedMutex.RLock()
	defer fake.isFilesystemMountedMutex.RUnlock()
	fake.linkFilesetMutex.RLock()
	defer fake.linkFilesetMutex.RUnlock()
	fake.listFilesetMutex.RLock()
	defer fake.listFilesetMutex.RUnlock()
	fake.listFilesetQuotaMutex.RLock()
	defer fake.listFilesetQuotaMutex.RUnlock()
	fake.listFilesetsMutex.RLock()
	defer fake.listFilesetsMutex.RUnlock()
	fake.listFilesystemsMutex.RLock()
	defer fake.listFilesystemsMutex.RUnlock()
	fake.setFilesetQuotaMutex.RLock()
	defer fake.setFilesetQuotaMutex.RUnlock()
	fake.unlinkFilesetMutex.RLock()
	defer fake.unlinkFilesetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpectrumScaleConnector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ connectors.SpectrumScaleConnector = new(FakeSpectrumScaleConnector)
