// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/remote/mounter/block_device_mounter_utils"
	"github.com/IBM/ubiquity/resources"
)

type FakeBlockDeviceMounterUtils struct {
	DisconnectAllStub        func(*resources.VolumeMountProperties) error
	disconnectAllMutex       sync.RWMutex
	disconnectAllArgsForCall []struct {
		arg1 *resources.VolumeMountProperties
	}
	disconnectAllReturns struct {
		result1 error
	}
	disconnectAllReturnsOnCall map[int]struct {
		result1 error
	}
	DiscoverStub        func(string, bool) (string, error)
	discoverMutex       sync.RWMutex
	discoverArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	discoverReturns struct {
		result1 string
		result2 error
	}
	discoverReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	MountDeviceFlowStub        func(string, string, string) error
	mountDeviceFlowMutex       sync.RWMutex
	mountDeviceFlowArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	mountDeviceFlowReturns struct {
		result1 error
	}
	mountDeviceFlowReturnsOnCall map[int]struct {
		result1 error
	}
	RescanAllStub        func(*resources.VolumeMountProperties) error
	rescanAllMutex       sync.RWMutex
	rescanAllArgsForCall []struct {
		arg1 *resources.VolumeMountProperties
	}
	rescanAllReturns struct {
		result1 error
	}
	rescanAllReturnsOnCall map[int]struct {
		result1 error
	}
	UnmountDeviceFlowStub        func(string, string) error
	unmountDeviceFlowMutex       sync.RWMutex
	unmountDeviceFlowArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unmountDeviceFlowReturns struct {
		result1 error
	}
	unmountDeviceFlowReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlockDeviceMounterUtils) DisconnectAll(arg1 *resources.VolumeMountProperties) error {
	fake.disconnectAllMutex.Lock()
	ret, specificReturn := fake.disconnectAllReturnsOnCall[len(fake.disconnectAllArgsForCall)]
	fake.disconnectAllArgsForCall = append(fake.disconnectAllArgsForCall, struct {
		arg1 *resources.VolumeMountProperties
	}{arg1})
	fake.recordInvocation("DisconnectAll", []interface{}{arg1})
	fake.disconnectAllMutex.Unlock()
	if fake.DisconnectAllStub != nil {
		return fake.DisconnectAllStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.disconnectAllReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceMounterUtils) DisconnectAllCallCount() int {
	fake.disconnectAllMutex.RLock()
	defer fake.disconnectAllMutex.RUnlock()
	return len(fake.disconnectAllArgsForCall)
}

func (fake *FakeBlockDeviceMounterUtils) DisconnectAllCalls(stub func(*resources.VolumeMountProperties) error) {
	fake.disconnectAllMutex.Lock()
	defer fake.disconnectAllMutex.Unlock()
	fake.DisconnectAllStub = stub
}

func (fake *FakeBlockDeviceMounterUtils) DisconnectAllArgsForCall(i int) *resources.VolumeMountProperties {
	fake.disconnectAllMutex.RLock()
	defer fake.disconnectAllMutex.RUnlock()
	argsForCall := fake.disconnectAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDeviceMounterUtils) DisconnectAllReturns(result1 error) {
	fake.disconnectAllMutex.Lock()
	defer fake.disconnectAllMutex.Unlock()
	fake.DisconnectAllStub = nil
	fake.disconnectAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) DisconnectAllReturnsOnCall(i int, result1 error) {
	fake.disconnectAllMutex.Lock()
	defer fake.disconnectAllMutex.Unlock()
	fake.DisconnectAllStub = nil
	if fake.disconnectAllReturnsOnCall == nil {
		fake.disconnectAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.disconnectAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) Discover(arg1 string, arg2 bool) (string, error) {
	fake.discoverMutex.Lock()
	ret, specificReturn := fake.discoverReturnsOnCall[len(fake.discoverArgsForCall)]
	fake.discoverArgsForCall = append(fake.discoverArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("Discover", []interface{}{arg1, arg2})
	fake.discoverMutex.Unlock()
	if fake.DiscoverStub != nil {
		return fake.DiscoverStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.discoverReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlockDeviceMounterUtils) DiscoverCallCount() int {
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	return len(fake.discoverArgsForCall)
}

func (fake *FakeBlockDeviceMounterUtils) DiscoverCalls(stub func(string, bool) (string, error)) {
	fake.discoverMutex.Lock()
	defer fake.discoverMutex.Unlock()
	fake.DiscoverStub = stub
}

func (fake *FakeBlockDeviceMounterUtils) DiscoverArgsForCall(i int) (string, bool) {
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	argsForCall := fake.discoverArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceMounterUtils) DiscoverReturns(result1 string, result2 error) {
	fake.discoverMutex.Lock()
	defer fake.discoverMutex.Unlock()
	fake.DiscoverStub = nil
	fake.discoverReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceMounterUtils) DiscoverReturnsOnCall(i int, result1 string, result2 error) {
	fake.discoverMutex.Lock()
	defer fake.discoverMutex.Unlock()
	fake.DiscoverStub = nil
	if fake.discoverReturnsOnCall == nil {
		fake.discoverReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.discoverReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlockDeviceMounterUtils) MountDeviceFlow(arg1 string, arg2 string, arg3 string) error {
	fake.mountDeviceFlowMutex.Lock()
	ret, specificReturn := fake.mountDeviceFlowReturnsOnCall[len(fake.mountDeviceFlowArgsForCall)]
	fake.mountDeviceFlowArgsForCall = append(fake.mountDeviceFlowArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("MountDeviceFlow", []interface{}{arg1, arg2, arg3})
	fake.mountDeviceFlowMutex.Unlock()
	if fake.MountDeviceFlowStub != nil {
		return fake.MountDeviceFlowStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.mountDeviceFlowReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceMounterUtils) MountDeviceFlowCallCount() int {
	fake.mountDeviceFlowMutex.RLock()
	defer fake.mountDeviceFlowMutex.RUnlock()
	return len(fake.mountDeviceFlowArgsForCall)
}

func (fake *FakeBlockDeviceMounterUtils) MountDeviceFlowCalls(stub func(string, string, string) error) {
	fake.mountDeviceFlowMutex.Lock()
	defer fake.mountDeviceFlowMutex.Unlock()
	fake.MountDeviceFlowStub = stub
}

func (fake *FakeBlockDeviceMounterUtils) MountDeviceFlowArgsForCall(i int) (string, string, string) {
	fake.mountDeviceFlowMutex.RLock()
	defer fake.mountDeviceFlowMutex.RUnlock()
	argsForCall := fake.mountDeviceFlowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBlockDeviceMounterUtils) MountDeviceFlowReturns(result1 error) {
	fake.mountDeviceFlowMutex.Lock()
	defer fake.mountDeviceFlowMutex.Unlock()
	fake.MountDeviceFlowStub = nil
	fake.mountDeviceFlowReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) MountDeviceFlowReturnsOnCall(i int, result1 error) {
	fake.mountDeviceFlowMutex.Lock()
	defer fake.mountDeviceFlowMutex.Unlock()
	fake.MountDeviceFlowStub = nil
	if fake.mountDeviceFlowReturnsOnCall == nil {
		fake.mountDeviceFlowReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mountDeviceFlowReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) RescanAll(arg1 *resources.VolumeMountProperties) error {
	fake.rescanAllMutex.Lock()
	ret, specificReturn := fake.rescanAllReturnsOnCall[len(fake.rescanAllArgsForCall)]
	fake.rescanAllArgsForCall = append(fake.rescanAllArgsForCall, struct {
		arg1 *resources.VolumeMountProperties
	}{arg1})
	fake.recordInvocation("RescanAll", []interface{}{arg1})
	fake.rescanAllMutex.Unlock()
	if fake.RescanAllStub != nil {
		return fake.RescanAllStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.rescanAllReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceMounterUtils) RescanAllCallCount() int {
	fake.rescanAllMutex.RLock()
	defer fake.rescanAllMutex.RUnlock()
	return len(fake.rescanAllArgsForCall)
}

func (fake *FakeBlockDeviceMounterUtils) RescanAllCalls(stub func(*resources.VolumeMountProperties) error) {
	fake.rescanAllMutex.Lock()
	defer fake.rescanAllMutex.Unlock()
	fake.RescanAllStub = stub
}

func (fake *FakeBlockDeviceMounterUtils) RescanAllArgsForCall(i int) *resources.VolumeMountProperties {
	fake.rescanAllMutex.RLock()
	defer fake.rescanAllMutex.RUnlock()
	argsForCall := fake.rescanAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlockDeviceMounterUtils) RescanAllReturns(result1 error) {
	fake.rescanAllMutex.Lock()
	defer fake.rescanAllMutex.Unlock()
	fake.RescanAllStub = nil
	fake.rescanAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) RescanAllReturnsOnCall(i int, result1 error) {
	fake.rescanAllMutex.Lock()
	defer fake.rescanAllMutex.Unlock()
	fake.RescanAllStub = nil
	if fake.rescanAllReturnsOnCall == nil {
		fake.rescanAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rescanAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) UnmountDeviceFlow(arg1 string, arg2 string) error {
	fake.unmountDeviceFlowMutex.Lock()
	ret, specificReturn := fake.unmountDeviceFlowReturnsOnCall[len(fake.unmountDeviceFlowArgsForCall)]
	fake.unmountDeviceFlowArgsForCall = append(fake.unmountDeviceFlowArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UnmountDeviceFlow", []interface{}{arg1, arg2})
	fake.unmountDeviceFlowMutex.Unlock()
	if fake.UnmountDeviceFlowStub != nil {
		return fake.UnmountDeviceFlowStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unmountDeviceFlowReturns
	return fakeReturns.result1
}

func (fake *FakeBlockDeviceMounterUtils) UnmountDeviceFlowCallCount() int {
	fake.unmountDeviceFlowMutex.RLock()
	defer fake.unmountDeviceFlowMutex.RUnlock()
	return len(fake.unmountDeviceFlowArgsForCall)
}

func (fake *FakeBlockDeviceMounterUtils) UnmountDeviceFlowCalls(stub func(string, string) error) {
	fake.unmountDeviceFlowMutex.Lock()
	defer fake.unmountDeviceFlowMutex.Unlock()
	fake.UnmountDeviceFlowStub = stub
}

func (fake *FakeBlockDeviceMounterUtils) UnmountDeviceFlowArgsForCall(i int) (string, string) {
	fake.unmountDeviceFlowMutex.RLock()
	defer fake.unmountDeviceFlowMutex.RUnlock()
	argsForCall := fake.unmountDeviceFlowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlockDeviceMounterUtils) UnmountDeviceFlowReturns(result1 error) {
	fake.unmountDeviceFlowMutex.Lock()
	defer fake.unmountDeviceFlowMutex.Unlock()
	fake.UnmountDeviceFlowStub = nil
	fake.unmountDeviceFlowReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) UnmountDeviceFlowReturnsOnCall(i int, result1 error) {
	fake.unmountDeviceFlowMutex.Lock()
	defer fake.unmountDeviceFlowMutex.Unlock()
	fake.UnmountDeviceFlowStub = nil
	if fake.unmountDeviceFlowReturnsOnCall == nil {
		fake.unmountDeviceFlowReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmountDeviceFlowReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlockDeviceMounterUtils) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disconnectAllMutex.RLock()
	defer fake.disconnectAllMutex.RUnlock()
	fake.discoverMutex.RLock()
	defer fake.discoverMutex.RUnlock()
	fake.mountDeviceFlowMutex.RLock()
	defer fake.mountDeviceFlowMutex.RUnlock()
	fake.rescanAllMutex.RLock()
	defer fake.rescanAllMutex.RUnlock()
	fake.unmountDeviceFlowMutex.RLock()
	defer fake.unmountDeviceFlowMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlockDeviceMounterUtils) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ block_device_mounter_utils.BlockDeviceMounterUtils = new(FakeBlockDeviceMounterUtils)
