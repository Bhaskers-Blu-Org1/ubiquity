// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/resources"
)

type FakeStorageClient struct {
	ActivateStub        func(resources.ActivateRequest) error
	activateMutex       sync.RWMutex
	activateArgsForCall []struct {
		arg1 resources.ActivateRequest
	}
	activateReturns struct {
		result1 error
	}
	activateReturnsOnCall map[int]struct {
		result1 error
	}
	AttachStub        func(resources.AttachRequest) (string, error)
	attachMutex       sync.RWMutex
	attachArgsForCall []struct {
		arg1 resources.AttachRequest
	}
	attachReturns struct {
		result1 string
		result2 error
	}
	attachReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CreateVolumeStub        func(resources.CreateVolumeRequest) error
	createVolumeMutex       sync.RWMutex
	createVolumeArgsForCall []struct {
		arg1 resources.CreateVolumeRequest
	}
	createVolumeReturns struct {
		result1 error
	}
	createVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	DetachStub        func(resources.DetachRequest) error
	detachMutex       sync.RWMutex
	detachArgsForCall []struct {
		arg1 resources.DetachRequest
	}
	detachReturns struct {
		result1 error
	}
	detachReturnsOnCall map[int]struct {
		result1 error
	}
	GetVolumeStub        func(resources.GetVolumeRequest) (resources.Volume, error)
	getVolumeMutex       sync.RWMutex
	getVolumeArgsForCall []struct {
		arg1 resources.GetVolumeRequest
	}
	getVolumeReturns struct {
		result1 resources.Volume
		result2 error
	}
	getVolumeReturnsOnCall map[int]struct {
		result1 resources.Volume
		result2 error
	}
	GetVolumeConfigStub        func(resources.GetVolumeConfigRequest) (map[string]interface{}, error)
	getVolumeConfigMutex       sync.RWMutex
	getVolumeConfigArgsForCall []struct {
		arg1 resources.GetVolumeConfigRequest
	}
	getVolumeConfigReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	getVolumeConfigReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	ListVolumesStub        func(resources.ListVolumesRequest) ([]resources.Volume, error)
	listVolumesMutex       sync.RWMutex
	listVolumesArgsForCall []struct {
		arg1 resources.ListVolumesRequest
	}
	listVolumesReturns struct {
		result1 []resources.Volume
		result2 error
	}
	listVolumesReturnsOnCall map[int]struct {
		result1 []resources.Volume
		result2 error
	}
	RemoveVolumeStub        func(resources.RemoveVolumeRequest) error
	removeVolumeMutex       sync.RWMutex
	removeVolumeArgsForCall []struct {
		arg1 resources.RemoveVolumeRequest
	}
	removeVolumeReturns struct {
		result1 error
	}
	removeVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorageClient) Activate(arg1 resources.ActivateRequest) error {
	fake.activateMutex.Lock()
	ret, specificReturn := fake.activateReturnsOnCall[len(fake.activateArgsForCall)]
	fake.activateArgsForCall = append(fake.activateArgsForCall, struct {
		arg1 resources.ActivateRequest
	}{arg1})
	fake.recordInvocation("Activate", []interface{}{arg1})
	fake.activateMutex.Unlock()
	if fake.ActivateStub != nil {
		return fake.ActivateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.activateReturns
	return fakeReturns.result1
}

func (fake *FakeStorageClient) ActivateCallCount() int {
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	return len(fake.activateArgsForCall)
}

func (fake *FakeStorageClient) ActivateCalls(stub func(resources.ActivateRequest) error) {
	fake.activateMutex.Lock()
	defer fake.activateMutex.Unlock()
	fake.ActivateStub = stub
}

func (fake *FakeStorageClient) ActivateArgsForCall(i int) resources.ActivateRequest {
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	argsForCall := fake.activateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) ActivateReturns(result1 error) {
	fake.activateMutex.Lock()
	defer fake.activateMutex.Unlock()
	fake.ActivateStub = nil
	fake.activateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) ActivateReturnsOnCall(i int, result1 error) {
	fake.activateMutex.Lock()
	defer fake.activateMutex.Unlock()
	fake.ActivateStub = nil
	if fake.activateReturnsOnCall == nil {
		fake.activateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.activateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Attach(arg1 resources.AttachRequest) (string, error) {
	fake.attachMutex.Lock()
	ret, specificReturn := fake.attachReturnsOnCall[len(fake.attachArgsForCall)]
	fake.attachArgsForCall = append(fake.attachArgsForCall, struct {
		arg1 resources.AttachRequest
	}{arg1})
	fake.recordInvocation("Attach", []interface{}{arg1})
	fake.attachMutex.Unlock()
	if fake.AttachStub != nil {
		return fake.AttachStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.attachReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageClient) AttachCallCount() int {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return len(fake.attachArgsForCall)
}

func (fake *FakeStorageClient) AttachCalls(stub func(resources.AttachRequest) (string, error)) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = stub
}

func (fake *FakeStorageClient) AttachArgsForCall(i int) resources.AttachRequest {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	argsForCall := fake.attachArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) AttachReturns(result1 string, result2 error) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = nil
	fake.attachReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) AttachReturnsOnCall(i int, result1 string, result2 error) {
	fake.attachMutex.Lock()
	defer fake.attachMutex.Unlock()
	fake.AttachStub = nil
	if fake.attachReturnsOnCall == nil {
		fake.attachReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.attachReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) CreateVolume(arg1 resources.CreateVolumeRequest) error {
	fake.createVolumeMutex.Lock()
	ret, specificReturn := fake.createVolumeReturnsOnCall[len(fake.createVolumeArgsForCall)]
	fake.createVolumeArgsForCall = append(fake.createVolumeArgsForCall, struct {
		arg1 resources.CreateVolumeRequest
	}{arg1})
	fake.recordInvocation("CreateVolume", []interface{}{arg1})
	fake.createVolumeMutex.Unlock()
	if fake.CreateVolumeStub != nil {
		return fake.CreateVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createVolumeReturns
	return fakeReturns.result1
}

func (fake *FakeStorageClient) CreateVolumeCallCount() int {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	return len(fake.createVolumeArgsForCall)
}

func (fake *FakeStorageClient) CreateVolumeCalls(stub func(resources.CreateVolumeRequest) error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = stub
}

func (fake *FakeStorageClient) CreateVolumeArgsForCall(i int) resources.CreateVolumeRequest {
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	argsForCall := fake.createVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) CreateVolumeReturns(result1 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	fake.createVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) CreateVolumeReturnsOnCall(i int, result1 error) {
	fake.createVolumeMutex.Lock()
	defer fake.createVolumeMutex.Unlock()
	fake.CreateVolumeStub = nil
	if fake.createVolumeReturnsOnCall == nil {
		fake.createVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Detach(arg1 resources.DetachRequest) error {
	fake.detachMutex.Lock()
	ret, specificReturn := fake.detachReturnsOnCall[len(fake.detachArgsForCall)]
	fake.detachArgsForCall = append(fake.detachArgsForCall, struct {
		arg1 resources.DetachRequest
	}{arg1})
	fake.recordInvocation("Detach", []interface{}{arg1})
	fake.detachMutex.Unlock()
	if fake.DetachStub != nil {
		return fake.DetachStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.detachReturns
	return fakeReturns.result1
}

func (fake *FakeStorageClient) DetachCallCount() int {
	fake.detachMutex.RLock()
	defer fake.detachMutex.RUnlock()
	return len(fake.detachArgsForCall)
}

func (fake *FakeStorageClient) DetachCalls(stub func(resources.DetachRequest) error) {
	fake.detachMutex.Lock()
	defer fake.detachMutex.Unlock()
	fake.DetachStub = stub
}

func (fake *FakeStorageClient) DetachArgsForCall(i int) resources.DetachRequest {
	fake.detachMutex.RLock()
	defer fake.detachMutex.RUnlock()
	argsForCall := fake.detachArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) DetachReturns(result1 error) {
	fake.detachMutex.Lock()
	defer fake.detachMutex.Unlock()
	fake.DetachStub = nil
	fake.detachReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) DetachReturnsOnCall(i int, result1 error) {
	fake.detachMutex.Lock()
	defer fake.detachMutex.Unlock()
	fake.DetachStub = nil
	if fake.detachReturnsOnCall == nil {
		fake.detachReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.detachReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) GetVolume(arg1 resources.GetVolumeRequest) (resources.Volume, error) {
	fake.getVolumeMutex.Lock()
	ret, specificReturn := fake.getVolumeReturnsOnCall[len(fake.getVolumeArgsForCall)]
	fake.getVolumeArgsForCall = append(fake.getVolumeArgsForCall, struct {
		arg1 resources.GetVolumeRequest
	}{arg1})
	fake.recordInvocation("GetVolume", []interface{}{arg1})
	fake.getVolumeMutex.Unlock()
	if fake.GetVolumeStub != nil {
		return fake.GetVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageClient) GetVolumeCallCount() int {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return len(fake.getVolumeArgsForCall)
}

func (fake *FakeStorageClient) GetVolumeCalls(stub func(resources.GetVolumeRequest) (resources.Volume, error)) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = stub
}

func (fake *FakeStorageClient) GetVolumeArgsForCall(i int) resources.GetVolumeRequest {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	argsForCall := fake.getVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) GetVolumeReturns(result1 resources.Volume, result2 error) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = nil
	fake.getVolumeReturns = struct {
		result1 resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) GetVolumeReturnsOnCall(i int, result1 resources.Volume, result2 error) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = nil
	if fake.getVolumeReturnsOnCall == nil {
		fake.getVolumeReturnsOnCall = make(map[int]struct {
			result1 resources.Volume
			result2 error
		})
	}
	fake.getVolumeReturnsOnCall[i] = struct {
		result1 resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) GetVolumeConfig(arg1 resources.GetVolumeConfigRequest) (map[string]interface{}, error) {
	fake.getVolumeConfigMutex.Lock()
	ret, specificReturn := fake.getVolumeConfigReturnsOnCall[len(fake.getVolumeConfigArgsForCall)]
	fake.getVolumeConfigArgsForCall = append(fake.getVolumeConfigArgsForCall, struct {
		arg1 resources.GetVolumeConfigRequest
	}{arg1})
	fake.recordInvocation("GetVolumeConfig", []interface{}{arg1})
	fake.getVolumeConfigMutex.Unlock()
	if fake.GetVolumeConfigStub != nil {
		return fake.GetVolumeConfigStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVolumeConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageClient) GetVolumeConfigCallCount() int {
	fake.getVolumeConfigMutex.RLock()
	defer fake.getVolumeConfigMutex.RUnlock()
	return len(fake.getVolumeConfigArgsForCall)
}

func (fake *FakeStorageClient) GetVolumeConfigCalls(stub func(resources.GetVolumeConfigRequest) (map[string]interface{}, error)) {
	fake.getVolumeConfigMutex.Lock()
	defer fake.getVolumeConfigMutex.Unlock()
	fake.GetVolumeConfigStub = stub
}

func (fake *FakeStorageClient) GetVolumeConfigArgsForCall(i int) resources.GetVolumeConfigRequest {
	fake.getVolumeConfigMutex.RLock()
	defer fake.getVolumeConfigMutex.RUnlock()
	argsForCall := fake.getVolumeConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) GetVolumeConfigReturns(result1 map[string]interface{}, result2 error) {
	fake.getVolumeConfigMutex.Lock()
	defer fake.getVolumeConfigMutex.Unlock()
	fake.GetVolumeConfigStub = nil
	fake.getVolumeConfigReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) GetVolumeConfigReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.getVolumeConfigMutex.Lock()
	defer fake.getVolumeConfigMutex.Unlock()
	fake.GetVolumeConfigStub = nil
	if fake.getVolumeConfigReturnsOnCall == nil {
		fake.getVolumeConfigReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.getVolumeConfigReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) ListVolumes(arg1 resources.ListVolumesRequest) ([]resources.Volume, error) {
	fake.listVolumesMutex.Lock()
	ret, specificReturn := fake.listVolumesReturnsOnCall[len(fake.listVolumesArgsForCall)]
	fake.listVolumesArgsForCall = append(fake.listVolumesArgsForCall, struct {
		arg1 resources.ListVolumesRequest
	}{arg1})
	fake.recordInvocation("ListVolumes", []interface{}{arg1})
	fake.listVolumesMutex.Unlock()
	if fake.ListVolumesStub != nil {
		return fake.ListVolumesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listVolumesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorageClient) ListVolumesCallCount() int {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return len(fake.listVolumesArgsForCall)
}

func (fake *FakeStorageClient) ListVolumesCalls(stub func(resources.ListVolumesRequest) ([]resources.Volume, error)) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = stub
}

func (fake *FakeStorageClient) ListVolumesArgsForCall(i int) resources.ListVolumesRequest {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	argsForCall := fake.listVolumesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) ListVolumesReturns(result1 []resources.Volume, result2 error) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = nil
	fake.listVolumesReturns = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) ListVolumesReturnsOnCall(i int, result1 []resources.Volume, result2 error) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = nil
	if fake.listVolumesReturnsOnCall == nil {
		fake.listVolumesReturnsOnCall = make(map[int]struct {
			result1 []resources.Volume
			result2 error
		})
	}
	fake.listVolumesReturnsOnCall[i] = struct {
		result1 []resources.Volume
		result2 error
	}{result1, result2}
}

func (fake *FakeStorageClient) RemoveVolume(arg1 resources.RemoveVolumeRequest) error {
	fake.removeVolumeMutex.Lock()
	ret, specificReturn := fake.removeVolumeReturnsOnCall[len(fake.removeVolumeArgsForCall)]
	fake.removeVolumeArgsForCall = append(fake.removeVolumeArgsForCall, struct {
		arg1 resources.RemoveVolumeRequest
	}{arg1})
	fake.recordInvocation("RemoveVolume", []interface{}{arg1})
	fake.removeVolumeMutex.Unlock()
	if fake.RemoveVolumeStub != nil {
		return fake.RemoveVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeVolumeReturns
	return fakeReturns.result1
}

func (fake *FakeStorageClient) RemoveVolumeCallCount() int {
	fake.removeVolumeMutex.RLock()
	defer fake.removeVolumeMutex.RUnlock()
	return len(fake.removeVolumeArgsForCall)
}

func (fake *FakeStorageClient) RemoveVolumeCalls(stub func(resources.RemoveVolumeRequest) error) {
	fake.removeVolumeMutex.Lock()
	defer fake.removeVolumeMutex.Unlock()
	fake.RemoveVolumeStub = stub
}

func (fake *FakeStorageClient) RemoveVolumeArgsForCall(i int) resources.RemoveVolumeRequest {
	fake.removeVolumeMutex.RLock()
	defer fake.removeVolumeMutex.RUnlock()
	argsForCall := fake.removeVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorageClient) RemoveVolumeReturns(result1 error) {
	fake.removeVolumeMutex.Lock()
	defer fake.removeVolumeMutex.Unlock()
	fake.RemoveVolumeStub = nil
	fake.removeVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) RemoveVolumeReturnsOnCall(i int, result1 error) {
	fake.removeVolumeMutex.Lock()
	defer fake.removeVolumeMutex.Unlock()
	fake.RemoveVolumeStub = nil
	if fake.removeVolumeReturnsOnCall == nil {
		fake.removeVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStorageClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	fake.createVolumeMutex.RLock()
	defer fake.createVolumeMutex.RUnlock()
	fake.detachMutex.RLock()
	defer fake.detachMutex.RUnlock()
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	fake.getVolumeConfigMutex.RLock()
	defer fake.getVolumeConfigMutex.RUnlock()
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	fake.removeVolumeMutex.RLock()
	defer fake.removeVolumeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorageClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resources.StorageClient = new(FakeStorageClient)
