// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/local/scbe"
)

type FakeScbeDataModelWrapper struct {
	DeleteVolumeStub        func(string) error
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		arg1 string
	}
	deleteVolumeReturns struct {
		result1 error
	}
	deleteVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	GetVolumeStub        func(string, bool) (scbe.ScbeVolume, error)
	getVolumeMutex       sync.RWMutex
	getVolumeArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	getVolumeReturns struct {
		result1 scbe.ScbeVolume
		result2 error
	}
	getVolumeReturnsOnCall map[int]struct {
		result1 scbe.ScbeVolume
		result2 error
	}
	InsertVolumeStub        func(string, string, string) error
	insertVolumeMutex       sync.RWMutex
	insertVolumeArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	insertVolumeReturns struct {
		result1 error
	}
	insertVolumeReturnsOnCall map[int]struct {
		result1 error
	}
	ListVolumesStub        func() ([]scbe.ScbeVolume, error)
	listVolumesMutex       sync.RWMutex
	listVolumesArgsForCall []struct {
	}
	listVolumesReturns struct {
		result1 []scbe.ScbeVolume
		result2 error
	}
	listVolumesReturnsOnCall map[int]struct {
		result1 []scbe.ScbeVolume
		result2 error
	}
	UpdateDatabaseVolumeStub        func(*scbe.ScbeVolume)
	updateDatabaseVolumeMutex       sync.RWMutex
	updateDatabaseVolumeArgsForCall []struct {
		arg1 *scbe.ScbeVolume
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScbeDataModelWrapper) DeleteVolume(arg1 string) error {
	fake.deleteVolumeMutex.Lock()
	ret, specificReturn := fake.deleteVolumeReturnsOnCall[len(fake.deleteVolumeArgsForCall)]
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteVolume", []interface{}{arg1})
	fake.deleteVolumeMutex.Unlock()
	if fake.DeleteVolumeStub != nil {
		return fake.DeleteVolumeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteVolumeReturns
	return fakeReturns.result1
}

func (fake *FakeScbeDataModelWrapper) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeScbeDataModelWrapper) DeleteVolumeCalls(stub func(string) error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = stub
}

func (fake *FakeScbeDataModelWrapper) DeleteVolumeArgsForCall(i int) string {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	argsForCall := fake.deleteVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScbeDataModelWrapper) DeleteVolumeReturns(result1 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScbeDataModelWrapper) DeleteVolumeReturnsOnCall(i int, result1 error) {
	fake.deleteVolumeMutex.Lock()
	defer fake.deleteVolumeMutex.Unlock()
	fake.DeleteVolumeStub = nil
	if fake.deleteVolumeReturnsOnCall == nil {
		fake.deleteVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeScbeDataModelWrapper) GetVolume(arg1 string, arg2 bool) (scbe.ScbeVolume, error) {
	fake.getVolumeMutex.Lock()
	ret, specificReturn := fake.getVolumeReturnsOnCall[len(fake.getVolumeArgsForCall)]
	fake.getVolumeArgsForCall = append(fake.getVolumeArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("GetVolume", []interface{}{arg1, arg2})
	fake.getVolumeMutex.Unlock()
	if fake.GetVolumeStub != nil {
		return fake.GetVolumeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVolumeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeScbeDataModelWrapper) GetVolumeCallCount() int {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return len(fake.getVolumeArgsForCall)
}

func (fake *FakeScbeDataModelWrapper) GetVolumeCalls(stub func(string, bool) (scbe.ScbeVolume, error)) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = stub
}

func (fake *FakeScbeDataModelWrapper) GetVolumeArgsForCall(i int) (string, bool) {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	argsForCall := fake.getVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeScbeDataModelWrapper) GetVolumeReturns(result1 scbe.ScbeVolume, result2 error) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = nil
	fake.getVolumeReturns = struct {
		result1 scbe.ScbeVolume
		result2 error
	}{result1, result2}
}

func (fake *FakeScbeDataModelWrapper) GetVolumeReturnsOnCall(i int, result1 scbe.ScbeVolume, result2 error) {
	fake.getVolumeMutex.Lock()
	defer fake.getVolumeMutex.Unlock()
	fake.GetVolumeStub = nil
	if fake.getVolumeReturnsOnCall == nil {
		fake.getVolumeReturnsOnCall = make(map[int]struct {
			result1 scbe.ScbeVolume
			result2 error
		})
	}
	fake.getVolumeReturnsOnCall[i] = struct {
		result1 scbe.ScbeVolume
		result2 error
	}{result1, result2}
}

func (fake *FakeScbeDataModelWrapper) InsertVolume(arg1 string, arg2 string, arg3 string) error {
	fake.insertVolumeMutex.Lock()
	ret, specificReturn := fake.insertVolumeReturnsOnCall[len(fake.insertVolumeArgsForCall)]
	fake.insertVolumeArgsForCall = append(fake.insertVolumeArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("InsertVolume", []interface{}{arg1, arg2, arg3})
	fake.insertVolumeMutex.Unlock()
	if fake.InsertVolumeStub != nil {
		return fake.InsertVolumeStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.insertVolumeReturns
	return fakeReturns.result1
}

func (fake *FakeScbeDataModelWrapper) InsertVolumeCallCount() int {
	fake.insertVolumeMutex.RLock()
	defer fake.insertVolumeMutex.RUnlock()
	return len(fake.insertVolumeArgsForCall)
}

func (fake *FakeScbeDataModelWrapper) InsertVolumeCalls(stub func(string, string, string) error) {
	fake.insertVolumeMutex.Lock()
	defer fake.insertVolumeMutex.Unlock()
	fake.InsertVolumeStub = stub
}

func (fake *FakeScbeDataModelWrapper) InsertVolumeArgsForCall(i int) (string, string, string) {
	fake.insertVolumeMutex.RLock()
	defer fake.insertVolumeMutex.RUnlock()
	argsForCall := fake.insertVolumeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeScbeDataModelWrapper) InsertVolumeReturns(result1 error) {
	fake.insertVolumeMutex.Lock()
	defer fake.insertVolumeMutex.Unlock()
	fake.InsertVolumeStub = nil
	fake.insertVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeScbeDataModelWrapper) InsertVolumeReturnsOnCall(i int, result1 error) {
	fake.insertVolumeMutex.Lock()
	defer fake.insertVolumeMutex.Unlock()
	fake.InsertVolumeStub = nil
	if fake.insertVolumeReturnsOnCall == nil {
		fake.insertVolumeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertVolumeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeScbeDataModelWrapper) ListVolumes() ([]scbe.ScbeVolume, error) {
	fake.listVolumesMutex.Lock()
	ret, specificReturn := fake.listVolumesReturnsOnCall[len(fake.listVolumesArgsForCall)]
	fake.listVolumesArgsForCall = append(fake.listVolumesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListVolumes", []interface{}{})
	fake.listVolumesMutex.Unlock()
	if fake.ListVolumesStub != nil {
		return fake.ListVolumesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listVolumesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeScbeDataModelWrapper) ListVolumesCallCount() int {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return len(fake.listVolumesArgsForCall)
}

func (fake *FakeScbeDataModelWrapper) ListVolumesCalls(stub func() ([]scbe.ScbeVolume, error)) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = stub
}

func (fake *FakeScbeDataModelWrapper) ListVolumesReturns(result1 []scbe.ScbeVolume, result2 error) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = nil
	fake.listVolumesReturns = struct {
		result1 []scbe.ScbeVolume
		result2 error
	}{result1, result2}
}

func (fake *FakeScbeDataModelWrapper) ListVolumesReturnsOnCall(i int, result1 []scbe.ScbeVolume, result2 error) {
	fake.listVolumesMutex.Lock()
	defer fake.listVolumesMutex.Unlock()
	fake.ListVolumesStub = nil
	if fake.listVolumesReturnsOnCall == nil {
		fake.listVolumesReturnsOnCall = make(map[int]struct {
			result1 []scbe.ScbeVolume
			result2 error
		})
	}
	fake.listVolumesReturnsOnCall[i] = struct {
		result1 []scbe.ScbeVolume
		result2 error
	}{result1, result2}
}

func (fake *FakeScbeDataModelWrapper) UpdateDatabaseVolume(arg1 *scbe.ScbeVolume) {
	fake.updateDatabaseVolumeMutex.Lock()
	fake.updateDatabaseVolumeArgsForCall = append(fake.updateDatabaseVolumeArgsForCall, struct {
		arg1 *scbe.ScbeVolume
	}{arg1})
	fake.recordInvocation("UpdateDatabaseVolume", []interface{}{arg1})
	fake.updateDatabaseVolumeMutex.Unlock()
	if fake.UpdateDatabaseVolumeStub != nil {
		fake.UpdateDatabaseVolumeStub(arg1)
	}
}

func (fake *FakeScbeDataModelWrapper) UpdateDatabaseVolumeCallCount() int {
	fake.updateDatabaseVolumeMutex.RLock()
	defer fake.updateDatabaseVolumeMutex.RUnlock()
	return len(fake.updateDatabaseVolumeArgsForCall)
}

func (fake *FakeScbeDataModelWrapper) UpdateDatabaseVolumeCalls(stub func(*scbe.ScbeVolume)) {
	fake.updateDatabaseVolumeMutex.Lock()
	defer fake.updateDatabaseVolumeMutex.Unlock()
	fake.UpdateDatabaseVolumeStub = stub
}

func (fake *FakeScbeDataModelWrapper) UpdateDatabaseVolumeArgsForCall(i int) *scbe.ScbeVolume {
	fake.updateDatabaseVolumeMutex.RLock()
	defer fake.updateDatabaseVolumeMutex.RUnlock()
	argsForCall := fake.updateDatabaseVolumeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeScbeDataModelWrapper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	fake.insertVolumeMutex.RLock()
	defer fake.insertVolumeMutex.RUnlock()
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	fake.updateDatabaseVolumeMutex.RLock()
	defer fake.updateDatabaseVolumeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScbeDataModelWrapper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ scbe.ScbeDataModelWrapper = new(FakeScbeDataModelWrapper)
