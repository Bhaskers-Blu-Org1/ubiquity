// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/IBM/ubiquity/resources"
)

type FakeMounter struct {
	ActionAfterDetachStub        func(resources.AfterDetachRequest) error
	actionAfterDetachMutex       sync.RWMutex
	actionAfterDetachArgsForCall []struct {
		arg1 resources.AfterDetachRequest
	}
	actionAfterDetachReturns struct {
		result1 error
	}
	actionAfterDetachReturnsOnCall map[int]struct {
		result1 error
	}
	MountStub        func(resources.MountRequest) (string, error)
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		arg1 resources.MountRequest
	}
	mountReturns struct {
		result1 string
		result2 error
	}
	mountReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UnmountStub        func(resources.UnmountRequest) error
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		arg1 resources.UnmountRequest
	}
	unmountReturns struct {
		result1 error
	}
	unmountReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMounter) ActionAfterDetach(arg1 resources.AfterDetachRequest) error {
	fake.actionAfterDetachMutex.Lock()
	ret, specificReturn := fake.actionAfterDetachReturnsOnCall[len(fake.actionAfterDetachArgsForCall)]
	fake.actionAfterDetachArgsForCall = append(fake.actionAfterDetachArgsForCall, struct {
		arg1 resources.AfterDetachRequest
	}{arg1})
	fake.recordInvocation("ActionAfterDetach", []interface{}{arg1})
	fake.actionAfterDetachMutex.Unlock()
	if fake.ActionAfterDetachStub != nil {
		return fake.ActionAfterDetachStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.actionAfterDetachReturns
	return fakeReturns.result1
}

func (fake *FakeMounter) ActionAfterDetachCallCount() int {
	fake.actionAfterDetachMutex.RLock()
	defer fake.actionAfterDetachMutex.RUnlock()
	return len(fake.actionAfterDetachArgsForCall)
}

func (fake *FakeMounter) ActionAfterDetachCalls(stub func(resources.AfterDetachRequest) error) {
	fake.actionAfterDetachMutex.Lock()
	defer fake.actionAfterDetachMutex.Unlock()
	fake.ActionAfterDetachStub = stub
}

func (fake *FakeMounter) ActionAfterDetachArgsForCall(i int) resources.AfterDetachRequest {
	fake.actionAfterDetachMutex.RLock()
	defer fake.actionAfterDetachMutex.RUnlock()
	argsForCall := fake.actionAfterDetachArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMounter) ActionAfterDetachReturns(result1 error) {
	fake.actionAfterDetachMutex.Lock()
	defer fake.actionAfterDetachMutex.Unlock()
	fake.ActionAfterDetachStub = nil
	fake.actionAfterDetachReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) ActionAfterDetachReturnsOnCall(i int, result1 error) {
	fake.actionAfterDetachMutex.Lock()
	defer fake.actionAfterDetachMutex.Unlock()
	fake.ActionAfterDetachStub = nil
	if fake.actionAfterDetachReturnsOnCall == nil {
		fake.actionAfterDetachReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.actionAfterDetachReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Mount(arg1 resources.MountRequest) (string, error) {
	fake.mountMutex.Lock()
	ret, specificReturn := fake.mountReturnsOnCall[len(fake.mountArgsForCall)]
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		arg1 resources.MountRequest
	}{arg1})
	fake.recordInvocation("Mount", []interface{}{arg1})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.mountReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMounter) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeMounter) MountCalls(stub func(resources.MountRequest) (string, error)) {
	fake.mountMutex.Lock()
	defer fake.mountMutex.Unlock()
	fake.MountStub = stub
}

func (fake *FakeMounter) MountArgsForCall(i int) resources.MountRequest {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	argsForCall := fake.mountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMounter) MountReturns(result1 string, result2 error) {
	fake.mountMutex.Lock()
	defer fake.mountMutex.Unlock()
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMounter) MountReturnsOnCall(i int, result1 string, result2 error) {
	fake.mountMutex.Lock()
	defer fake.mountMutex.Unlock()
	fake.MountStub = nil
	if fake.mountReturnsOnCall == nil {
		fake.mountReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.mountReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeMounter) Unmount(arg1 resources.UnmountRequest) error {
	fake.unmountMutex.Lock()
	ret, specificReturn := fake.unmountReturnsOnCall[len(fake.unmountArgsForCall)]
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		arg1 resources.UnmountRequest
	}{arg1})
	fake.recordInvocation("Unmount", []interface{}{arg1})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unmountReturns
	return fakeReturns.result1
}

func (fake *FakeMounter) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeMounter) UnmountCalls(stub func(resources.UnmountRequest) error) {
	fake.unmountMutex.Lock()
	defer fake.unmountMutex.Unlock()
	fake.UnmountStub = stub
}

func (fake *FakeMounter) UnmountArgsForCall(i int) resources.UnmountRequest {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	argsForCall := fake.unmountArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMounter) UnmountReturns(result1 error) {
	fake.unmountMutex.Lock()
	defer fake.unmountMutex.Unlock()
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) UnmountReturnsOnCall(i int, result1 error) {
	fake.unmountMutex.Lock()
	defer fake.unmountMutex.Unlock()
	fake.UnmountStub = nil
	if fake.unmountReturnsOnCall == nil {
		fake.unmountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMounter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.actionAfterDetachMutex.RLock()
	defer fake.actionAfterDetachMutex.RUnlock()
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMounter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resources.Mounter = new(FakeMounter)
